 ExtJS
-------------------------------------------------------------------------------
Graphite used to require an external Ext installation but now Ext is bundled
with Graphite as allowed by the Ext FLOSS license exemption described here:

http://extjs.com/products/floss-exception.php


 Run install.py
-------------------------------------------------------------------------------
This will check for graphite's runtime dependencies and let
you know which you are missing. Download and install these modules and re-run
install.py until it detects all the required modules.

Graphite requires:
 python2.4 or greater
 pycairo (with PNG backend support)
 mod_python
 django
 python-pyparsing
 python-ldap (optional - needed for ldap-based webapp authentication)
 python-memcached (optional - needed for webapp caching, big performance boost)
 python-sqlite2 (optional - a django-supported database module is required)

Once install.py has completed, graphite will be installed in
/usr/local/graphite (unless you specified --install-root). It will
also tell you a particular post-install command to run if this is your
first installation.

If you are merely upgrading, you are already done. Do not run post-install.py.

 Running post-install.py (first-time installations only)
-------------------------------------------------------------------------------
At the end of install.py it will tell you to run post-install.py with some
particular command line options. Run this command exactly, in the same directory
you ran install.py in, and as the same user. Basically you should just
run this immediately after running install.py.

This script will create a graphite-vhost.conf file in the current directory.
You can use this file to configure apache.

 Apache Configuration
-------------------------------------------------------------------------------
First off, Apache has to have mod_python configured, this is usually done
by including a line like the following in your httpd.conf:

LoadModule python_module    modules/mod_python.so

Second you should configure a vhost for graphite (technically it doesn't have
to be a vhost but its good practice). This can be done one of two ways.

The first way (highly preferred) is to include independent vhost configs.

# This goes in httpd.conf
Include /usr/local/apache2/conf/vhosts.d/*.conf

Then simply drop the graphite-vhost.conf file that install.py created
into the vhosts.d/ directory (or whatever directory your system uses) and
apache is ready.

The second approach is to copy the contents of the graphite-vhost.conf file
and insert it down at the end of your httpd.conf.


 Custom Database Configuration
-------------------------------------------------------------------------------
By default, the graphite webapp uses a sqlite database. As long as you have the
appropriate sqlite module installed, you should not need to do any additional
database configuration. But if you wish to use a different database such as
MySQL or Postgres, read on.

After you setup your database server, create a database and a user with full
privileges on that database. Now we put that information into the graphite
webapp local_settings.py file.

Edit the $GRAPHITE_ROOT/webapp/web/local_settings.py 

In particular you will need to uncomment and modify all of the settings
that begin with "DATABASE_". Once you have done this, we need to tell
Django to create our tables.

cd $GRAPHITE_ROOT/webapp/web/
sudo python manage.py syncdb
# you will be prompted to create an admin user, this is a good idea

Restart apache and you should see the graphite webapp on the main page.
If you encounter problems, you can increase the verbosity of error output
by adding a "DEBUG = True" line to local_settings.py

Also remember that by default the apache logs for the graphite webapp are in
$GRAPHITE_ROOT/storage/logs/


 Next Steps - setup the backend (carbon)
-------------------------------------------------------------------------------
Now you have finished installing the graphite webapp, the next thing to do is put some
real data into it. This is accomplished by running the carbon-agent.py daemon
and send it some data as demonstrated in the included
./examples/example-client.py

Instructions for doing this in the README file.
